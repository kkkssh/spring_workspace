
#### spring web mvc 프로젝트 

0. spring web mvc 프로젝트는 웹애플리케이션 개발이므로 WAS 서버를 추가해야 합니다.

	<<의존성 추가>>
		<!--spring web mvc-->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring-version}</version>
		</dependency>
		<!-- 웹 애플리케이션 : jsp 의 jstl 추가-->
		<!-- https://mvnrepository.com/artifact/javax.servlet/jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>

1. 프로젝트 생성하기

1) File - New - Dynamic Web Project
	ㄴ 첫번째 단계 : 프로젝트이름 작성
	ㄴ 두번째 단계 : Add Folder 버튼 클릭해서 다음 2개 폴더를 만들기 => src/main/resources 와 src/test/java
	ㄴ 세번째 단계 : web.xml 생성 체크하기

2) Configure - Convert to Maven Project 

3) webapp - WEB-INF 폴더 아래 views 폴더 만들기

4) 환경설정 html, jsp 파일의 인코딩 UTF-8 로 바꾸기

2. spring web mvc 프로젝트 구성요소

1) web.xml
- ContextLoaderListener 설정 : 파라미터로 root-context.xml 파일 필요(db 연결동작 빈 정의)
- frontcontroller 동작을 위한 설정	: 파라미터로 servlet-context.xml 파일 필요(서블릿 관련 빈 정의)
- 기타 : 필터
* xml 파일이 저장된 폴더는 src/main/webapp/WEB-INF/

2) jsp 파일이 있는 폴더 : src/main/webapp/WEB-INF/views 폴더(views는 개발자가 만들어야 함)

3. 요청 처리 컨트롤러의 헨들러 메소드 형식

1) view name 은 요청 url 과 동일하다.
2) view 에 전달할 데이터는 Model 객체에 저장한다.
			ㄴ View 에 전달하면 Attribute
			ㄴ redirect 로 전달하면 파라미터가 됩니다.(RedirectAttributes 의 addAttribute() 와 동일함)
3) 파라미터 저장은 핸들러 메소드의 인자로 선언된 변수가 자동으로 한다.
@RequestParam(defaultValue="1") 은 파라미터 초기값을 설정하는 형식이다.
4) 파라미터로 받은 값이 다시 view 로 전달할 때에는 @ModelAttribute 로 설정한다.
			ㄴ View 에 전달하면 Attribute
			ㄴ redirect 로 전달하면 파라미터가 됩니다.(RedirectAttributes 의 addAttribute() 와 동일함)
5) 파라미터 개수가 많을 때, 그것들을 필드로 갖는 dto 또는 map 타입으로 선언하여 전달받는다.
			ㄴ 파라미터의 name 속성과 일치하는 dto 필드만 매핑이 됩니다.(dto 에 setter 필수)
			ㄴ map 으로 파라미터 받을 때 @RequestParam 필수
6) Post 요청을 처리한 후 다른 url 로 리다이렉트 할때에는 return "redirect:URL 주소"; 형식으로 한다.
7) 6)번과 같이 redirect 할때 스프링의 특징 : RedirectAttributes 를 사용해서 redirect URL 에 파라미터를 지정

* 보충 설명 : 주로 사용되는 방법
			- Model 객체의 addAttribute() 메소드는 
					★★★jsp 에서 request.setAttribute 또는 session.setAttribute 와 같은 동작
			- RedirectAttributes 객체의
					★★★addFlashAttribute() 는 파라미터가 아닌 임시 데이터 값을 URL 에 표시하지 않음(1회용)
			- RedirectAttributes 객체의
			 		addAttribute() 는 redirect URL 에 파라미터를 설정하는 역할(▶ Model 객체로 대체 가능)

4. session 사용 방법

방법 1) Model 객체로 addAttribute() 하고 애트리뷰트 이름을 @SessionAttributes 어노테이션으로 @Controller 아래에 지정하기
	   이 때는 반드시 logout(세션 데이터 삭제) 을 SessionStatus 객체로만 할수 있음.
방법 2) 기존 서블릿과 같이 메소드 인자로 HttpSession 타입을 선언하여 session.setAttribute 로 저장하기
	   이 때는 반드시 logout 을 HttpSession 객체로 해야 함.

※ @SessionAttribute("user") BookUser user 를 메소드 인자로 선언하여 세션에 저장된 user 애트리뷰트를 가져올 수 있습니다.
	ㄴ 단, 이 때는 방법1)과 방법2)로 저장된 것 모두를 가져올 수 있습니다.
